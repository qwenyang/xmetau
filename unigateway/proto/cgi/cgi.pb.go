// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.5.0
// source: cgi.proto

package cgi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 项目回包格式公共头部
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Header) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{1}
}

func (x *LoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 微信登录态相关信息
type CodeSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid     string `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	SessionKey string `protobuf:"bytes,4,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	Unionid    string `protobuf:"bytes,5,opt,name=unionid,proto3" json:"unionid,omitempty"`
}

func (x *CodeSession) Reset() {
	*x = CodeSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSession) ProtoMessage() {}

func (x *CodeSession) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSession.ProtoReflect.Descriptor instead.
func (*CodeSession) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{2}
}

func (x *CodeSession) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *CodeSession) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *CodeSession) GetUnionid() string {
	if x != nil {
		return x.Unionid
	}
	return ""
}

// 用户基础属性信息
type UserAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	NickName       string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                    // 用户昵称
	AvatarUrl      string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                 // 用户头像信息
	NoviceTraining int32  `protobuf:"varint,4,opt,name=novice_training,json=noviceTraining,proto3" json:"novice_training,omitempty"` // 是否完成新手训练
	PlayLevel      int32  `protobuf:"varint,5,opt,name=play_level,json=playLevel,proto3" json:"play_level,omitempty"`                // 用户当前的棋力等级
	GoldCoin       int32  `protobuf:"varint,6,opt,name=gold_coin,json=goldCoin,proto3" json:"gold_coin,omitempty"`                   // 金币数量
	WinNum         int32  `protobuf:"varint,7,opt,name=win_num,json=winNum,proto3" json:"win_num,omitempty"`                         // 赢棋的局数
	LoseNum        int32  `protobuf:"varint,8,opt,name=lose_num,json=loseNum,proto3" json:"lose_num,omitempty"`                      // 输棋的局数
	TieNum         int32  `protobuf:"varint,9,opt,name=tie_num,json=tieNum,proto3" json:"tie_num,omitempty"`                         // 平局的局数
	ModifyTime     string `protobuf:"bytes,100,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`            // 修改时间
	CreateTime     string `protobuf:"bytes,101,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`            // 修改时间
}

func (x *UserAttribute) Reset() {
	*x = UserAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttribute) ProtoMessage() {}

func (x *UserAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttribute.ProtoReflect.Descriptor instead.
func (*UserAttribute) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{3}
}

func (x *UserAttribute) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAttribute) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserAttribute) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserAttribute) GetNoviceTraining() int32 {
	if x != nil {
		return x.NoviceTraining
	}
	return 0
}

func (x *UserAttribute) GetPlayLevel() int32 {
	if x != nil {
		return x.PlayLevel
	}
	return 0
}

func (x *UserAttribute) GetGoldCoin() int32 {
	if x != nil {
		return x.GoldCoin
	}
	return 0
}

func (x *UserAttribute) GetWinNum() int32 {
	if x != nil {
		return x.WinNum
	}
	return 0
}

func (x *UserAttribute) GetLoseNum() int32 {
	if x != nil {
		return x.LoseNum
	}
	return 0
}

func (x *UserAttribute) GetTieNum() int32 {
	if x != nil {
		return x.TieNum
	}
	return 0
}

func (x *UserAttribute) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *UserAttribute) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type LoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CodeSession *CodeSession   `protobuf:"bytes,2,opt,name=code_session,json=codeSession,proto3" json:"code_session,omitempty"` // 微信登录态相关信息
	User        *UserAttribute `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                                  // 返回用户信息
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{4}
}

func (x *LoginRsp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoginRsp) GetCodeSession() *CodeSession {
	if x != nil {
		return x.CodeSession
	}
	return nil
}

func (x *LoginRsp) GetUser() *UserAttribute {
	if x != nil {
		return x.User
	}
	return nil
}

type QueryUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *QueryUserReq) Reset() {
	*x = QueryUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserReq) ProtoMessage() {}

func (x *QueryUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserReq.ProtoReflect.Descriptor instead.
func (*QueryUserReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{5}
}

func (x *QueryUserReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QueryUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	User   *UserAttribute `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"` // 返回用户信息
}

func (x *QueryUserResp) Reset() {
	*x = QueryUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserResp) ProtoMessage() {}

func (x *QueryUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserResp.ProtoReflect.Descriptor instead.
func (*QueryUserResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{6}
}

func (x *QueryUserResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QueryUserResp) GetUser() *UserAttribute {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserHeaderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         // 用户ID
	NickName  string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`    // 用户昵称
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // 用户头像信息
}

func (x *UpdateUserHeaderReq) Reset() {
	*x = UpdateUserHeaderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserHeaderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserHeaderReq) ProtoMessage() {}

func (x *UpdateUserHeaderReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserHeaderReq.ProtoReflect.Descriptor instead.
func (*UpdateUserHeaderReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserHeaderReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserHeaderReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UpdateUserHeaderReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type UpdateUserTrainingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	NoviceTraining int32  `protobuf:"varint,2,opt,name=novice_training,json=noviceTraining,proto3" json:"novice_training,omitempty"` // 是否完成新手训练
}

func (x *UpdateUserTrainingReq) Reset() {
	*x = UpdateUserTrainingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTrainingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTrainingReq) ProtoMessage() {}

func (x *UpdateUserTrainingReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTrainingReq.ProtoReflect.Descriptor instead.
func (*UpdateUserTrainingReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserTrainingReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserTrainingReq) GetNoviceTraining() int32 {
	if x != nil {
		return x.NoviceTraining
	}
	return 0
}

type UpdateUserLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户ID
	PlayLevel int32  `protobuf:"varint,2,opt,name=play_level,json=playLevel,proto3" json:"play_level,omitempty"` // 用户当前的棋力等级
	DiffLevel int32  `protobuf:"varint,3,opt,name=diff_level,json=diffLevel,proto3" json:"diff_level,omitempty"` // 用户棋力 加减差值
}

func (x *UpdateUserLevelReq) Reset() {
	*x = UpdateUserLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLevelReq) ProtoMessage() {}

func (x *UpdateUserLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateUserLevelReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserLevelReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserLevelReq) GetPlayLevel() int32 {
	if x != nil {
		return x.PlayLevel
	}
	return 0
}

func (x *UpdateUserLevelReq) GetDiffLevel() int32 {
	if x != nil {
		return x.DiffLevel
	}
	return 0
}

type UpdateUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	GoldCoin int32  `protobuf:"varint,2,opt,name=gold_coin,json=goldCoin,proto3" json:"gold_coin,omitempty"` // 用户金币数量
	DiffCoin int32  `protobuf:"varint,3,opt,name=diff_coin,json=diffCoin,proto3" json:"diff_coin,omitempty"` // 用户金币数量 加减差值
}

func (x *UpdateUserCoinReq) Reset() {
	*x = UpdateUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCoinReq) ProtoMessage() {}

func (x *UpdateUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCoinReq.ProtoReflect.Descriptor instead.
func (*UpdateUserCoinReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserCoinReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserCoinReq) GetGoldCoin() int32 {
	if x != nil {
		return x.GoldCoin
	}
	return 0
}

func (x *UpdateUserCoinReq) GetDiffCoin() int32 {
	if x != nil {
		return x.DiffCoin
	}
	return 0
}

type UpdateGameNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    // 用户ID
	WinNum  int32  `protobuf:"varint,2,opt,name=win_num,json=winNum,proto3" json:"win_num,omitempty"`    // 赢棋的局数
	LoseNum int32  `protobuf:"varint,3,opt,name=lose_num,json=loseNum,proto3" json:"lose_num,omitempty"` // 输棋的局数
	TieNum  int32  `protobuf:"varint,4,opt,name=tie_num,json=tieNum,proto3" json:"tie_num,omitempty"`    // 平局的局数
	DiffNum int32  `protobuf:"varint,5,opt,name=diff_num,json=diffNum,proto3" json:"diff_num,omitempty"` // -1 0 1
}

func (x *UpdateGameNumReq) Reset() {
	*x = UpdateGameNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameNumReq) ProtoMessage() {}

func (x *UpdateGameNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameNumReq.ProtoReflect.Descriptor instead.
func (*UpdateGameNumReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateGameNumReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateGameNumReq) GetWinNum() int32 {
	if x != nil {
		return x.WinNum
	}
	return 0
}

func (x *UpdateGameNumReq) GetLoseNum() int32 {
	if x != nil {
		return x.LoseNum
	}
	return 0
}

func (x *UpdateGameNumReq) GetTieNum() int32 {
	if x != nil {
		return x.TieNum
	}
	return 0
}

func (x *UpdateGameNumReq) GetDiffNum() int32 {
	if x != nil {
		return x.DiffNum
	}
	return 0
}

type UpdateUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	User   *UserAttribute `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"` // 返回用户信息
}

func (x *UpdateUserResp) Reset() {
	*x = UpdateUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResp) ProtoMessage() {}

func (x *UpdateUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResp.ProtoReflect.Descriptor instead.
func (*UpdateUserResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateUserResp) GetUser() *UserAttribute {
	if x != nil {
		return x.User
	}
	return nil
}

type UserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户ID
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页大小
	PageIndex int32  `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"` // 页下标
	GameName  string `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`     // 游戏名称
}

func (x *UserListReq) Reset() {
	*x = UserListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListReq) ProtoMessage() {}

func (x *UserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListReq.ProtoReflect.Descriptor instead.
func (*UserListReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{13}
}

func (x *UserListReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserListReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *UserListReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

type PageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                          // 总数
	PageSize  int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页大小
	PageIndex int32 `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"` // 页下标
}

func (x *PageData) Reset() {
	*x = PageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageData) ProtoMessage() {}

func (x *PageData) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageData.ProtoReflect.Descriptor instead.
func (*PageData) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{14}
}

func (x *PageData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageData) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageData) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

type UserListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PageData *PageData        `protobuf:"bytes,2,opt,name=page_data,json=pageData,proto3" json:"page_data,omitempty"`
	UserList []*UserAttribute `protobuf:"bytes,3,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"` // 返回用户信息列表
}

func (x *UserListResp) Reset() {
	*x = UserListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResp) ProtoMessage() {}

func (x *UserListResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResp.ProtoReflect.Descriptor instead.
func (*UserListResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{15}
}

func (x *UserListResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserListResp) GetPageData() *PageData {
	if x != nil {
		return x.PageData
	}
	return nil
}

func (x *UserListResp) GetUserList() []*UserAttribute {
	if x != nil {
		return x.UserList
	}
	return nil
}

type GameAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 资产ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // 资产名称
	Type      int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                            // 资产类型
	Level     int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                          // 资产级别
	GoldValue int32  `protobuf:"varint,5,opt,name=gold_value,json=goldValue,proto3" json:"gold_value,omitempty"` // 资产价值
	Url       string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`                               // 资产图地址
}

func (x *GameAsset) Reset() {
	*x = GameAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAsset) ProtoMessage() {}

func (x *GameAsset) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAsset.ProtoReflect.Descriptor instead.
func (*GameAsset) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{16}
}

func (x *GameAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameAsset) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GameAsset) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GameAsset) GetGoldValue() int32 {
	if x != nil {
		return x.GoldValue
	}
	return 0
}

func (x *GameAsset) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // ID
	UserId         uint64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	AssetId        uint64     `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                     // 资产ID
	Count          int32      `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                                        // 拥有的数量
	ExpirationTime string     `protobuf:"bytes,5,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // 过期时间
	Asset          *GameAsset `protobuf:"bytes,6,opt,name=asset,proto3" json:"asset,omitempty"`                                         // 资产项内容
}

func (x *UserAsset) Reset() {
	*x = UserAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAsset) ProtoMessage() {}

func (x *UserAsset) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAsset.ProtoReflect.Descriptor instead.
func (*UserAsset) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{17}
}

func (x *UserAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAsset) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAsset) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *UserAsset) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAsset) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

func (x *UserAsset) GetAsset() *GameAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type CommonUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *CommonUserReq) Reset() {
	*x = CommonUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonUserReq) ProtoMessage() {}

func (x *CommonUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonUserReq.ProtoReflect.Descriptor instead.
func (*CommonUserReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{18}
}

func (x *CommonUserReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AssetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Assets []*GameAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"` // 资产列表
}

func (x *AssetListResp) Reset() {
	*x = AssetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetListResp) ProtoMessage() {}

func (x *AssetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetListResp.ProtoReflect.Descriptor instead.
func (*AssetListResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{19}
}

func (x *AssetListResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AssetListResp) GetAssets() []*GameAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type UpdateUserAssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	AssetId        uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                     // 资产ID
	ExpirationTime string `protobuf:"bytes,3,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // 过期时间
}

func (x *UpdateUserAssetReq) Reset() {
	*x = UpdateUserAssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAssetReq) ProtoMessage() {}

func (x *UpdateUserAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAssetReq.ProtoReflect.Descriptor instead.
func (*UpdateUserAssetReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserAssetReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserAssetReq) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *UpdateUserAssetReq) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

type UserAssetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserAssets []*UserAsset `protobuf:"bytes,2,rep,name=user_assets,json=userAssets,proto3" json:"user_assets,omitempty"` // 返回用户资产列表
}

func (x *UserAssetResp) Reset() {
	*x = UserAssetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAssetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAssetResp) ProtoMessage() {}

func (x *UserAssetResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAssetResp.ProtoReflect.Descriptor instead.
func (*UserAssetResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{21}
}

func (x *UserAssetResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserAssetResp) GetUserAssets() []*UserAsset {
	if x != nil {
		return x.UserAssets
	}
	return nil
}

type GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetType  int32  `protobuf:"varint,1,opt,name=set_type,json=setType,proto3" json:"set_type,omitempty"`   // 设置类型
	SetId    uint64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`         // 设置ID
	SetKey   string `protobuf:"bytes,3,opt,name=set_key,json=setKey,proto3" json:"set_key,omitempty"`       // 设置Key
	SetValue string `protobuf:"bytes,4,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"` // 设置值
}

func (x *GameSetting) Reset() {
	*x = GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSetting) ProtoMessage() {}

func (x *GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSetting.ProtoReflect.Descriptor instead.
func (*GameSetting) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{22}
}

func (x *GameSetting) GetSetType() int32 {
	if x != nil {
		return x.SetType
	}
	return 0
}

func (x *GameSetting) GetSetId() uint64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *GameSetting) GetSetKey() string {
	if x != nil {
		return x.SetKey
	}
	return ""
}

func (x *GameSetting) GetSetValue() string {
	if x != nil {
		return x.SetValue
	}
	return ""
}

type GameSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    // 用户ID
	SetType int32  `protobuf:"varint,2,opt,name=set_type,json=setType,proto3" json:"set_type,omitempty"` // 设置类型
	SetId   uint64 `protobuf:"varint,3,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`       // 设置ID
}

func (x *GameSettingReq) Reset() {
	*x = GameSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSettingReq) ProtoMessage() {}

func (x *GameSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSettingReq.ProtoReflect.Descriptor instead.
func (*GameSettingReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{23}
}

func (x *GameSettingReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameSettingReq) GetSetType() int32 {
	if x != nil {
		return x.SetType
	}
	return 0
}

func (x *GameSettingReq) GetSetId() uint64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

type GameSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Settings []*GameSetting `protobuf:"bytes,2,rep,name=settings,proto3" json:"settings,omitempty"` // 设置列表信息
}

func (x *GameSettingResp) Reset() {
	*x = GameSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSettingResp) ProtoMessage() {}

func (x *GameSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSettingResp.ProtoReflect.Descriptor instead.
func (*GameSettingResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{24}
}

func (x *GameSettingResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GameSettingResp) GetSettings() []*GameSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`      // 用户ID
	SetType  int32  `protobuf:"varint,2,opt,name=set_type,json=setType,proto3" json:"set_type,omitempty"`   // 设置类型
	SetId    uint64 `protobuf:"varint,3,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`         // 设置ID
	SetKey   string `protobuf:"bytes,4,opt,name=set_key,json=setKey,proto3" json:"set_key,omitempty"`       // 设置Key
	SetValue string `protobuf:"bytes,5,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"` // 设置值
}

func (x *UpdateSettingReq) Reset() {
	*x = UpdateSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingReq) ProtoMessage() {}

func (x *UpdateSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingReq.ProtoReflect.Descriptor instead.
func (*UpdateSettingReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSettingReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSettingReq) GetSetType() int32 {
	if x != nil {
		return x.SetType
	}
	return 0
}

func (x *UpdateSettingReq) GetSetId() uint64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *UpdateSettingReq) GetSetKey() string {
	if x != nil {
		return x.SetKey
	}
	return ""
}

func (x *UpdateSettingReq) GetSetValue() string {
	if x != nil {
		return x.SetValue
	}
	return ""
}

type UpdateSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Settings []*GameSetting `protobuf:"bytes,2,rep,name=settings,proto3" json:"settings,omitempty"` // 设置列表信息
}

func (x *UpdateSettingResp) Reset() {
	*x = UpdateSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingResp) ProtoMessage() {}

func (x *UpdateSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingResp.ProtoReflect.Descriptor instead.
func (*UpdateSettingResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateSettingResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateSettingResp) GetSettings() []*GameSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户ID
	TeamId        uint64         `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                     // 队伍ID
	CharType      int32          `protobuf:"varint,3,opt,name=char_type,json=charType,proto3" json:"char_type,omitempty"`               // 任务角色
	LevelIndex    int32          `protobuf:"varint,4,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`         // 等级
	PassCount     int32          `protobuf:"varint,5,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`            // 通关次数
	FinishStatus  int32          `protobuf:"varint,6,opt,name=finish_status,json=finishStatus,proto3" json:"finish_status,omitempty"`   // 状态
	UserAttribute *UserAttribute `protobuf:"bytes,7,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"` // 用户属性
}

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMember.ProtoReflect.Descriptor instead.
func (*TeamMember) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{27}
}

func (x *TeamMember) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TeamMember) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamMember) GetCharType() int32 {
	if x != nil {
		return x.CharType
	}
	return 0
}

func (x *TeamMember) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TeamMember) GetPassCount() int32 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

func (x *TeamMember) GetFinishStatus() int32 {
	if x != nil {
		return x.FinishStatus
	}
	return 0
}

func (x *TeamMember) GetUserAttribute() *UserAttribute {
	if x != nil {
		return x.UserAttribute
	}
	return nil
}

type TeamGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      uint64        `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`               // 队伍ID
	TeamName    string        `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`          // 团队名称
	LevelIndex  int32         `protobuf:"varint,3,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`   // 等级
	Score       int32         `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                               // 分值
	TeamMembers []*TeamMember `protobuf:"bytes,5,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"` // 成员信息
}

func (x *TeamGroup) Reset() {
	*x = TeamGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGroup) ProtoMessage() {}

func (x *TeamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGroup.ProtoReflect.Descriptor instead.
func (*TeamGroup) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{28}
}

func (x *TeamGroup) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamGroup) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamGroup) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TeamGroup) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TeamGroup) GetTeamMembers() []*TeamMember {
	if x != nil {
		return x.TeamMembers
	}
	return nil
}

type CreateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	TeamId   uint64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`       // 队伍ID
	CharType int32  `protobuf:"varint,3,opt,name=char_type,json=charType,proto3" json:"char_type,omitempty"` // 任务角色
	TeamName string `protobuf:"bytes,4,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`  // 团队名称
}

func (x *CreateTeamReq) Reset() {
	*x = CreateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamReq) ProtoMessage() {}

func (x *CreateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamReq.ProtoReflect.Descriptor instead.
func (*CreateTeamReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{29}
}

func (x *CreateTeamReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateTeamReq) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *CreateTeamReq) GetCharType() int32 {
	if x != nil {
		return x.CharType
	}
	return 0
}

func (x *CreateTeamReq) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type CreateTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Team   *TeamGroup `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *CreateTeamResp) Reset() {
	*x = CreateTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamResp) ProtoMessage() {}

func (x *CreateTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamResp.ProtoReflect.Descriptor instead.
func (*CreateTeamResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTeamResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateTeamResp) GetTeam() *TeamGroup {
	if x != nil {
		return x.Team
	}
	return nil
}

type TeamRankListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *TeamRankListReq) Reset() {
	*x = TeamRankListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRankListReq) ProtoMessage() {}

func (x *TeamRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRankListReq.ProtoReflect.Descriptor instead.
func (*TeamRankListReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{31}
}

func (x *TeamRankListReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TeamRankListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Teams  []*TeamGroup `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *TeamRankListResp) Reset() {
	*x = TeamRankListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRankListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRankListResp) ProtoMessage() {}

func (x *TeamRankListResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRankListResp.ProtoReflect.Descriptor instead.
func (*TeamRankListResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{32}
}

func (x *TeamRankListResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TeamRankListResp) GetTeams() []*TeamGroup {
	if x != nil {
		return x.Teams
	}
	return nil
}

type JoinTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	TeamId   uint64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`       // 队伍ID
	CharType int32  `protobuf:"varint,3,opt,name=char_type,json=charType,proto3" json:"char_type,omitempty"` // 任务角色
}

func (x *JoinTeamReq) Reset() {
	*x = JoinTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTeamReq) ProtoMessage() {}

func (x *JoinTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTeamReq.ProtoReflect.Descriptor instead.
func (*JoinTeamReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{33}
}

func (x *JoinTeamReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JoinTeamReq) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *JoinTeamReq) GetCharType() int32 {
	if x != nil {
		return x.CharType
	}
	return 0
}

type JoinTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Team   *TeamGroup `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *JoinTeamResp) Reset() {
	*x = JoinTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTeamResp) ProtoMessage() {}

func (x *JoinTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTeamResp.ProtoReflect.Descriptor instead.
func (*JoinTeamResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{34}
}

func (x *JoinTeamResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *JoinTeamResp) GetTeam() *TeamGroup {
	if x != nil {
		return x.Team
	}
	return nil
}

type TeamInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	TeamId uint64 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"` // 队伍ID
}

func (x *TeamInfoReq) Reset() {
	*x = TeamInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfoReq) ProtoMessage() {}

func (x *TeamInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfoReq.ProtoReflect.Descriptor instead.
func (*TeamInfoReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{35}
}

func (x *TeamInfoReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TeamInfoReq) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type TeamInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Team   *TeamGroup `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *TeamInfoResp) Reset() {
	*x = TeamInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfoResp) ProtoMessage() {}

func (x *TeamInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfoResp.ProtoReflect.Descriptor instead.
func (*TeamInfoResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{36}
}

func (x *TeamInfoResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TeamInfoResp) GetTeam() *TeamGroup {
	if x != nil {
		return x.Team
	}
	return nil
}

type UserTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *UserTeamReq) Reset() {
	*x = UserTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTeamReq) ProtoMessage() {}

func (x *UserTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTeamReq.ProtoReflect.Descriptor instead.
func (*UserTeamReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{37}
}

func (x *UserTeamReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Team   *TeamGroup `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *UserTeamResp) Reset() {
	*x = UserTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTeamResp) ProtoMessage() {}

func (x *UserTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTeamResp.ProtoReflect.Descriptor instead.
func (*UserTeamResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{38}
}

func (x *UserTeamResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserTeamResp) GetTeam() *TeamGroup {
	if x != nil {
		return x.Team
	}
	return nil
}

type TeamResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelIndex int32 `protobuf:"varint,1,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"` // 等级
	Score      int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                             // 分值
}

func (x *TeamResource) Reset() {
	*x = TeamResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamResource) ProtoMessage() {}

func (x *TeamResource) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamResource.ProtoReflect.Descriptor instead.
func (*TeamResource) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{39}
}

func (x *TeamResource) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TeamResource) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TeamUserResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCount    int32 `protobuf:"varint,1,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`          // 尝试通关次数
	LevelIndex   int32 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`       // 等级
	FinishStatus int32 `protobuf:"varint,3,opt,name=finish_status,json=finishStatus,proto3" json:"finish_status,omitempty"` // 状态
}

func (x *TeamUserResource) Reset() {
	*x = TeamUserResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamUserResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamUserResource) ProtoMessage() {}

func (x *TeamUserResource) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamUserResource.ProtoReflect.Descriptor instead.
func (*TeamUserResource) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{40}
}

func (x *TeamUserResource) GetPassCount() int32 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

func (x *TeamUserResource) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *TeamUserResource) GetFinishStatus() int32 {
	if x != nil {
		return x.FinishStatus
	}
	return 0
}

type UpdateUserTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // 用户ID
	TeamId          uint64            `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                             // 队伍ID
	UpdateType      int32             `protobuf:"varint,3,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`                 // 1 开始游戏 2 游戏通关 3 游戏失败
	OldUserResource *TeamUserResource `protobuf:"bytes,4,opt,name=old_user_resource,json=oldUserResource,proto3" json:"old_user_resource,omitempty"` // 更新前用户资源一下
	NewUserResource *TeamUserResource `protobuf:"bytes,5,opt,name=new_user_resource,json=newUserResource,proto3" json:"new_user_resource,omitempty"` // 更新后用户资源一下
	OldTeamResource *TeamResource     `protobuf:"bytes,6,opt,name=old_team_resource,json=oldTeamResource,proto3" json:"old_team_resource,omitempty"` // 更新前资源一下
	NewTeamResource *TeamResource     `protobuf:"bytes,7,opt,name=new_team_resource,json=newTeamResource,proto3" json:"new_team_resource,omitempty"` // 更新后资源一下
}

func (x *UpdateUserTeamReq) Reset() {
	*x = UpdateUserTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTeamReq) ProtoMessage() {}

func (x *UpdateUserTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTeamReq.ProtoReflect.Descriptor instead.
func (*UpdateUserTeamReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateUserTeamReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserTeamReq) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *UpdateUserTeamReq) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *UpdateUserTeamReq) GetOldUserResource() *TeamUserResource {
	if x != nil {
		return x.OldUserResource
	}
	return nil
}

func (x *UpdateUserTeamReq) GetNewUserResource() *TeamUserResource {
	if x != nil {
		return x.NewUserResource
	}
	return nil
}

func (x *UpdateUserTeamReq) GetOldTeamResource() *TeamResource {
	if x != nil {
		return x.OldTeamResource
	}
	return nil
}

func (x *UpdateUserTeamReq) GetNewTeamResource() *TeamResource {
	if x != nil {
		return x.NewTeamResource
	}
	return nil
}

type UpdateUserTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Team   *TeamGroup `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"` // 设置列表信息
}

func (x *UpdateUserTeamResp) Reset() {
	*x = UpdateUserTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTeamResp) ProtoMessage() {}

func (x *UpdateUserTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTeamResp.ProtoReflect.Descriptor instead.
func (*UpdateUserTeamResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateUserTeamResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateUserTeamResp) GetTeam() *TeamGroup {
	if x != nil {
		return x.Team
	}
	return nil
}

type UserBarrierLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
	LevelIndex int32  `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"` // 关卡级别
	PassCount  int32  `protobuf:"varint,3,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`    // 通关次数
	PassToken  int32  `protobuf:"varint,4,opt,name=pass_token,json=passToken,proto3" json:"pass_token,omitempty"`    // 通关Token次数
}

func (x *UserBarrierLevel) Reset() {
	*x = UserBarrierLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBarrierLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBarrierLevel) ProtoMessage() {}

func (x *UserBarrierLevel) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBarrierLevel.ProtoReflect.Descriptor instead.
func (*UserBarrierLevel) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{43}
}

func (x *UserBarrierLevel) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBarrierLevel) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *UserBarrierLevel) GetPassCount() int32 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

func (x *UserBarrierLevel) GetPassToken() int32 {
	if x != nil {
		return x.PassToken
	}
	return 0
}

type UserBarrierLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *UserBarrierLevelReq) Reset() {
	*x = UserBarrierLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBarrierLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBarrierLevelReq) ProtoMessage() {}

func (x *UserBarrierLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBarrierLevelReq.ProtoReflect.Descriptor instead.
func (*UserBarrierLevelReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{44}
}

func (x *UserBarrierLevelReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserBarrierLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Barrier *UserBarrierLevel `protobuf:"bytes,2,opt,name=barrier,proto3" json:"barrier,omitempty"`
}

func (x *UserBarrierLevelResp) Reset() {
	*x = UserBarrierLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBarrierLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBarrierLevelResp) ProtoMessage() {}

func (x *UserBarrierLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBarrierLevelResp.ProtoReflect.Descriptor instead.
func (*UserBarrierLevelResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{45}
}

func (x *UserBarrierLevelResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserBarrierLevelResp) GetBarrier() *UserBarrierLevel {
	if x != nil {
		return x.Barrier
	}
	return nil
}

type UpdateUserBarrierLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
	LevelIndex int32  `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"` // 关卡级别
	PassCount  int32  `protobuf:"varint,3,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`    // 通关次数
	PassToken  int32  `protobuf:"varint,4,opt,name=pass_token,json=passToken,proto3" json:"pass_token,omitempty"`    // 通关Token次数
}

func (x *UpdateUserBarrierLevelReq) Reset() {
	*x = UpdateUserBarrierLevelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserBarrierLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserBarrierLevelReq) ProtoMessage() {}

func (x *UpdateUserBarrierLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserBarrierLevelReq.ProtoReflect.Descriptor instead.
func (*UpdateUserBarrierLevelReq) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateUserBarrierLevelReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserBarrierLevelReq) GetLevelIndex() int32 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *UpdateUserBarrierLevelReq) GetPassCount() int32 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

func (x *UpdateUserBarrierLevelReq) GetPassToken() int32 {
	if x != nil {
		return x.PassToken
	}
	return 0
}

type UpdateUserBarrierLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Barrier *UserBarrierLevel `protobuf:"bytes,2,opt,name=barrier,proto3" json:"barrier,omitempty"`
}

func (x *UpdateUserBarrierLevelResp) Reset() {
	*x = UpdateUserBarrierLevelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cgi_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserBarrierLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserBarrierLevelResp) ProtoMessage() {}

func (x *UpdateUserBarrierLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_cgi_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserBarrierLevelResp.ProtoReflect.Descriptor instead.
func (*UpdateUserBarrierLevelResp) Descriptor() ([]byte, []int) {
	return file_cgi_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateUserBarrierLevelResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateUserBarrierLevelResp) GetBarrier() *UserBarrierLevel {
	if x != nil {
		return x.Barrier
	}
	return nil
}

var File_cgi_proto protoreflect.FileDescriptor

var file_cgi_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x67, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x67, 0x69,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x27, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x59, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x66, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x66,
	0x66, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x66, 0x66, 0x4e, 0x75, 0x6d, 0x22, 0x5d, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x28, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0d, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x93, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x67, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22,
	0x2a, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x10, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x22, 0x3f, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x57, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x26, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x45, 0x0a, 0x0c,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea, 0x02, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x6e, 0x65,
	0x77, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x07, 0x62, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x07, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x32, 0xb7, 0x12,
	0x0a, 0x0c, 0x58, 0x4d, 0x65, 0x74, 0x61, 0x75, 0x43, 0x67, 0x69, 0x53, 0x76, 0x72, 0x12, 0x4e,
	0x0a, 0x0b, 0x57, 0x78, 0x54, 0x61, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x77, 0x78,
	0x2f, 0x74, 0x61, 0x6e, 0x6b, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x56,
	0x0a, 0x0f, 0x57, 0x78, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x77, 0x78, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x50, 0x0a, 0x0c, 0x57, 0x78, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x75,
	0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x77, 0x78, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x16, 0x42, 0x79, 0x74, 0x65,
	0x44, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61,
	0x6d, 0x65, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x53,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x63, 0x67, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x75, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14,
	0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x75,
	0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17,
	0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16,
	0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22,
	0x11, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6e,
	0x75, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x67, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x67,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x75, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x67, 0x69, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16,
	0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x75, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x62, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x67, 0x69,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x75, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e, 0x63, 0x67, 0x69,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x52,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x10, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x75, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x62, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63,
	0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f,
	0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x75, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x2e,
	0x63, 0x67, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x75, 0x6e, 0x69,
	0x67, 0x61, 0x6d, 0x65, 0x2f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x67, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x75, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x16, 0x5a, 0x14, 0x75, 0x6e, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x67, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cgi_proto_rawDescOnce sync.Once
	file_cgi_proto_rawDescData = file_cgi_proto_rawDesc
)

func file_cgi_proto_rawDescGZIP() []byte {
	file_cgi_proto_rawDescOnce.Do(func() {
		file_cgi_proto_rawDescData = protoimpl.X.CompressGZIP(file_cgi_proto_rawDescData)
	})
	return file_cgi_proto_rawDescData
}

var file_cgi_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_cgi_proto_goTypes = []interface{}{
	(*Header)(nil),                     // 0: cgi.Header
	(*LoginReq)(nil),                   // 1: cgi.LoginReq
	(*CodeSession)(nil),                // 2: cgi.CodeSession
	(*UserAttribute)(nil),              // 3: cgi.UserAttribute
	(*LoginRsp)(nil),                   // 4: cgi.LoginRsp
	(*QueryUserReq)(nil),               // 5: cgi.QueryUserReq
	(*QueryUserResp)(nil),              // 6: cgi.QueryUserResp
	(*UpdateUserHeaderReq)(nil),        // 7: cgi.UpdateUserHeaderReq
	(*UpdateUserTrainingReq)(nil),      // 8: cgi.UpdateUserTrainingReq
	(*UpdateUserLevelReq)(nil),         // 9: cgi.UpdateUserLevelReq
	(*UpdateUserCoinReq)(nil),          // 10: cgi.UpdateUserCoinReq
	(*UpdateGameNumReq)(nil),           // 11: cgi.UpdateGameNumReq
	(*UpdateUserResp)(nil),             // 12: cgi.UpdateUserResp
	(*UserListReq)(nil),                // 13: cgi.UserListReq
	(*PageData)(nil),                   // 14: cgi.PageData
	(*UserListResp)(nil),               // 15: cgi.UserListResp
	(*GameAsset)(nil),                  // 16: cgi.GameAsset
	(*UserAsset)(nil),                  // 17: cgi.UserAsset
	(*CommonUserReq)(nil),              // 18: cgi.CommonUserReq
	(*AssetListResp)(nil),              // 19: cgi.AssetListResp
	(*UpdateUserAssetReq)(nil),         // 20: cgi.UpdateUserAssetReq
	(*UserAssetResp)(nil),              // 21: cgi.UserAssetResp
	(*GameSetting)(nil),                // 22: cgi.GameSetting
	(*GameSettingReq)(nil),             // 23: cgi.GameSettingReq
	(*GameSettingResp)(nil),            // 24: cgi.GameSettingResp
	(*UpdateSettingReq)(nil),           // 25: cgi.UpdateSettingReq
	(*UpdateSettingResp)(nil),          // 26: cgi.UpdateSettingResp
	(*TeamMember)(nil),                 // 27: cgi.TeamMember
	(*TeamGroup)(nil),                  // 28: cgi.TeamGroup
	(*CreateTeamReq)(nil),              // 29: cgi.CreateTeamReq
	(*CreateTeamResp)(nil),             // 30: cgi.CreateTeamResp
	(*TeamRankListReq)(nil),            // 31: cgi.TeamRankListReq
	(*TeamRankListResp)(nil),           // 32: cgi.TeamRankListResp
	(*JoinTeamReq)(nil),                // 33: cgi.JoinTeamReq
	(*JoinTeamResp)(nil),               // 34: cgi.JoinTeamResp
	(*TeamInfoReq)(nil),                // 35: cgi.TeamInfoReq
	(*TeamInfoResp)(nil),               // 36: cgi.TeamInfoResp
	(*UserTeamReq)(nil),                // 37: cgi.UserTeamReq
	(*UserTeamResp)(nil),               // 38: cgi.UserTeamResp
	(*TeamResource)(nil),               // 39: cgi.TeamResource
	(*TeamUserResource)(nil),           // 40: cgi.TeamUserResource
	(*UpdateUserTeamReq)(nil),          // 41: cgi.UpdateUserTeamReq
	(*UpdateUserTeamResp)(nil),         // 42: cgi.UpdateUserTeamResp
	(*UserBarrierLevel)(nil),           // 43: cgi.UserBarrierLevel
	(*UserBarrierLevelReq)(nil),        // 44: cgi.UserBarrierLevelReq
	(*UserBarrierLevelResp)(nil),       // 45: cgi.UserBarrierLevelResp
	(*UpdateUserBarrierLevelReq)(nil),  // 46: cgi.UpdateUserBarrierLevelReq
	(*UpdateUserBarrierLevelResp)(nil), // 47: cgi.UpdateUserBarrierLevelResp
}
var file_cgi_proto_depIdxs = []int32{
	0,  // 0: cgi.LoginRsp.header:type_name -> cgi.Header
	2,  // 1: cgi.LoginRsp.code_session:type_name -> cgi.CodeSession
	3,  // 2: cgi.LoginRsp.user:type_name -> cgi.UserAttribute
	0,  // 3: cgi.QueryUserResp.header:type_name -> cgi.Header
	3,  // 4: cgi.QueryUserResp.user:type_name -> cgi.UserAttribute
	0,  // 5: cgi.UpdateUserResp.header:type_name -> cgi.Header
	3,  // 6: cgi.UpdateUserResp.user:type_name -> cgi.UserAttribute
	0,  // 7: cgi.UserListResp.header:type_name -> cgi.Header
	14, // 8: cgi.UserListResp.page_data:type_name -> cgi.PageData
	3,  // 9: cgi.UserListResp.user_list:type_name -> cgi.UserAttribute
	16, // 10: cgi.UserAsset.asset:type_name -> cgi.GameAsset
	0,  // 11: cgi.AssetListResp.header:type_name -> cgi.Header
	16, // 12: cgi.AssetListResp.assets:type_name -> cgi.GameAsset
	0,  // 13: cgi.UserAssetResp.header:type_name -> cgi.Header
	17, // 14: cgi.UserAssetResp.user_assets:type_name -> cgi.UserAsset
	0,  // 15: cgi.GameSettingResp.header:type_name -> cgi.Header
	22, // 16: cgi.GameSettingResp.settings:type_name -> cgi.GameSetting
	0,  // 17: cgi.UpdateSettingResp.header:type_name -> cgi.Header
	22, // 18: cgi.UpdateSettingResp.settings:type_name -> cgi.GameSetting
	3,  // 19: cgi.TeamMember.user_attribute:type_name -> cgi.UserAttribute
	27, // 20: cgi.TeamGroup.team_members:type_name -> cgi.TeamMember
	0,  // 21: cgi.CreateTeamResp.header:type_name -> cgi.Header
	28, // 22: cgi.CreateTeamResp.team:type_name -> cgi.TeamGroup
	0,  // 23: cgi.TeamRankListResp.header:type_name -> cgi.Header
	28, // 24: cgi.TeamRankListResp.teams:type_name -> cgi.TeamGroup
	0,  // 25: cgi.JoinTeamResp.header:type_name -> cgi.Header
	28, // 26: cgi.JoinTeamResp.team:type_name -> cgi.TeamGroup
	0,  // 27: cgi.TeamInfoResp.header:type_name -> cgi.Header
	28, // 28: cgi.TeamInfoResp.team:type_name -> cgi.TeamGroup
	0,  // 29: cgi.UserTeamResp.header:type_name -> cgi.Header
	28, // 30: cgi.UserTeamResp.team:type_name -> cgi.TeamGroup
	40, // 31: cgi.UpdateUserTeamReq.old_user_resource:type_name -> cgi.TeamUserResource
	40, // 32: cgi.UpdateUserTeamReq.new_user_resource:type_name -> cgi.TeamUserResource
	39, // 33: cgi.UpdateUserTeamReq.old_team_resource:type_name -> cgi.TeamResource
	39, // 34: cgi.UpdateUserTeamReq.new_team_resource:type_name -> cgi.TeamResource
	0,  // 35: cgi.UpdateUserTeamResp.header:type_name -> cgi.Header
	28, // 36: cgi.UpdateUserTeamResp.team:type_name -> cgi.TeamGroup
	0,  // 37: cgi.UserBarrierLevelResp.header:type_name -> cgi.Header
	43, // 38: cgi.UserBarrierLevelResp.barrier:type_name -> cgi.UserBarrierLevel
	0,  // 39: cgi.UpdateUserBarrierLevelResp.header:type_name -> cgi.Header
	43, // 40: cgi.UpdateUserBarrierLevelResp.barrier:type_name -> cgi.UserBarrierLevel
	1,  // 41: cgi.XMetauCgiSvr.WxTankLogin:input_type -> cgi.LoginReq
	1,  // 42: cgi.XMetauCgiSvr.WxBilliardLogin:input_type -> cgi.LoginReq
	1,  // 43: cgi.XMetauCgiSvr.WxChessLogin:input_type -> cgi.LoginReq
	1,  // 44: cgi.XMetauCgiSvr.ByteDanceBilliardLogin:input_type -> cgi.LoginReq
	5,  // 45: cgi.XMetauCgiSvr.QueryUser:input_type -> cgi.QueryUserReq
	7,  // 46: cgi.XMetauCgiSvr.UpdateUserHeader:input_type -> cgi.UpdateUserHeaderReq
	8,  // 47: cgi.XMetauCgiSvr.UpdateUserNoviceTraining:input_type -> cgi.UpdateUserTrainingReq
	9,  // 48: cgi.XMetauCgiSvr.UpdateUserPlayLevel:input_type -> cgi.UpdateUserLevelReq
	10, // 49: cgi.XMetauCgiSvr.UpdateUserCoin:input_type -> cgi.UpdateUserCoinReq
	11, // 50: cgi.XMetauCgiSvr.UpdateGameNum:input_type -> cgi.UpdateGameNumReq
	13, // 51: cgi.XMetauCgiSvr.QueryUserRankList:input_type -> cgi.UserListReq
	13, // 52: cgi.XMetauCgiSvr.QueryRobotUserList:input_type -> cgi.UserListReq
	18, // 53: cgi.XMetauCgiSvr.AssetList:input_type -> cgi.CommonUserReq
	18, // 54: cgi.XMetauCgiSvr.UserAssetList:input_type -> cgi.CommonUserReq
	20, // 55: cgi.XMetauCgiSvr.UpdateUserAsset:input_type -> cgi.UpdateUserAssetReq
	23, // 56: cgi.XMetauCgiSvr.SettingList:input_type -> cgi.GameSettingReq
	25, // 57: cgi.XMetauCgiSvr.UpdateSetting:input_type -> cgi.UpdateSettingReq
	29, // 58: cgi.XMetauCgiSvr.CreateTeam:input_type -> cgi.CreateTeamReq
	31, // 59: cgi.XMetauCgiSvr.GetTeamRankList:input_type -> cgi.TeamRankListReq
	33, // 60: cgi.XMetauCgiSvr.JoinTeam:input_type -> cgi.JoinTeamReq
	37, // 61: cgi.XMetauCgiSvr.GetUserTeam:input_type -> cgi.UserTeamReq
	41, // 62: cgi.XMetauCgiSvr.UpdateUserTeam:input_type -> cgi.UpdateUserTeamReq
	35, // 63: cgi.XMetauCgiSvr.GetTeamInfo:input_type -> cgi.TeamInfoReq
	44, // 64: cgi.XMetauCgiSvr.GetUserBarrierLevel:input_type -> cgi.UserBarrierLevelReq
	46, // 65: cgi.XMetauCgiSvr.UpdateUserBarrierLevel:input_type -> cgi.UpdateUserBarrierLevelReq
	4,  // 66: cgi.XMetauCgiSvr.WxTankLogin:output_type -> cgi.LoginRsp
	4,  // 67: cgi.XMetauCgiSvr.WxBilliardLogin:output_type -> cgi.LoginRsp
	4,  // 68: cgi.XMetauCgiSvr.WxChessLogin:output_type -> cgi.LoginRsp
	4,  // 69: cgi.XMetauCgiSvr.ByteDanceBilliardLogin:output_type -> cgi.LoginRsp
	6,  // 70: cgi.XMetauCgiSvr.QueryUser:output_type -> cgi.QueryUserResp
	12, // 71: cgi.XMetauCgiSvr.UpdateUserHeader:output_type -> cgi.UpdateUserResp
	12, // 72: cgi.XMetauCgiSvr.UpdateUserNoviceTraining:output_type -> cgi.UpdateUserResp
	12, // 73: cgi.XMetauCgiSvr.UpdateUserPlayLevel:output_type -> cgi.UpdateUserResp
	12, // 74: cgi.XMetauCgiSvr.UpdateUserCoin:output_type -> cgi.UpdateUserResp
	12, // 75: cgi.XMetauCgiSvr.UpdateGameNum:output_type -> cgi.UpdateUserResp
	15, // 76: cgi.XMetauCgiSvr.QueryUserRankList:output_type -> cgi.UserListResp
	15, // 77: cgi.XMetauCgiSvr.QueryRobotUserList:output_type -> cgi.UserListResp
	19, // 78: cgi.XMetauCgiSvr.AssetList:output_type -> cgi.AssetListResp
	21, // 79: cgi.XMetauCgiSvr.UserAssetList:output_type -> cgi.UserAssetResp
	21, // 80: cgi.XMetauCgiSvr.UpdateUserAsset:output_type -> cgi.UserAssetResp
	24, // 81: cgi.XMetauCgiSvr.SettingList:output_type -> cgi.GameSettingResp
	26, // 82: cgi.XMetauCgiSvr.UpdateSetting:output_type -> cgi.UpdateSettingResp
	30, // 83: cgi.XMetauCgiSvr.CreateTeam:output_type -> cgi.CreateTeamResp
	32, // 84: cgi.XMetauCgiSvr.GetTeamRankList:output_type -> cgi.TeamRankListResp
	34, // 85: cgi.XMetauCgiSvr.JoinTeam:output_type -> cgi.JoinTeamResp
	38, // 86: cgi.XMetauCgiSvr.GetUserTeam:output_type -> cgi.UserTeamResp
	42, // 87: cgi.XMetauCgiSvr.UpdateUserTeam:output_type -> cgi.UpdateUserTeamResp
	36, // 88: cgi.XMetauCgiSvr.GetTeamInfo:output_type -> cgi.TeamInfoResp
	45, // 89: cgi.XMetauCgiSvr.GetUserBarrierLevel:output_type -> cgi.UserBarrierLevelResp
	47, // 90: cgi.XMetauCgiSvr.UpdateUserBarrierLevel:output_type -> cgi.UpdateUserBarrierLevelResp
	66, // [66:91] is the sub-list for method output_type
	41, // [41:66] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_cgi_proto_init() }
func file_cgi_proto_init() {
	if File_cgi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cgi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserHeaderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTrainingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserAssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAssetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRankListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRankListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamUserResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBarrierLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBarrierLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBarrierLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserBarrierLevelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cgi_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserBarrierLevelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cgi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cgi_proto_goTypes,
		DependencyIndexes: file_cgi_proto_depIdxs,
		MessageInfos:      file_cgi_proto_msgTypes,
	}.Build()
	File_cgi_proto = out.File
	file_cgi_proto_rawDesc = nil
	file_cgi_proto_goTypes = nil
	file_cgi_proto_depIdxs = nil
}
