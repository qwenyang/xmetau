// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: cgi.proto

package cgi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XMetauCgiSvrClient is the client API for XMetauCgiSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XMetauCgiSvrClient interface {
	// 各平台各游戏的登录接口
	// 微信坦克游戏登录
	WxTankLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 微信桌球游戏登录
	WxBilliardLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 登录换信息，一步到位
	WxChessLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 字节跳动桌球游戏登录
	ByteDanceBilliardLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 用户基础信息
	QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	// 更新用户头部信息
	UpdateUserHeader(ctx context.Context, in *UpdateUserHeaderReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新用户是否完成新手训练
	UpdateUserNoviceTraining(ctx context.Context, in *UpdateUserTrainingReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新用户棋力等级
	UpdateUserPlayLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新金币数量
	UpdateUserCoin(ctx context.Context, in *UpdateUserCoinReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新输赢的次数
	UpdateGameNum(ctx context.Context, in *UpdateGameNumReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 查询用户排名列表
	QueryUserRankList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// 拉取机器人列表
	QueryRobotUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// 资产相关
	AssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*AssetListResp, error)
	UserAssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*UserAssetResp, error)
	UpdateUserAsset(ctx context.Context, in *UpdateUserAssetReq, opts ...grpc.CallOption) (*UserAssetResp, error)
	// 设置相关
	SettingList(ctx context.Context, in *GameSettingReq, opts ...grpc.CallOption) (*GameSettingResp, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*UpdateSettingResp, error)
	// 队伍场景用户信息
	CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error)
	GetTeamRankList(ctx context.Context, in *TeamRankListReq, opts ...grpc.CallOption) (*TeamRankListResp, error)
	JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamResp, error)
	GetUserTeam(ctx context.Context, in *UserTeamReq, opts ...grpc.CallOption) (*UserTeamResp, error)
	UpdateUserTeam(ctx context.Context, in *UpdateUserTeamReq, opts ...grpc.CallOption) (*UpdateUserTeamResp, error)
	GetTeamInfo(ctx context.Context, in *TeamInfoReq, opts ...grpc.CallOption) (*TeamInfoResp, error)
	// 闯关信息
	GetUserBarrierLevel(ctx context.Context, in *UserBarrierLevelReq, opts ...grpc.CallOption) (*UserBarrierLevelResp, error)
	UpdateUserBarrierLevel(ctx context.Context, in *UpdateUserBarrierLevelReq, opts ...grpc.CallOption) (*UpdateUserBarrierLevelResp, error)
}

type xMetauCgiSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewXMetauCgiSvrClient(cc grpc.ClientConnInterface) XMetauCgiSvrClient {
	return &xMetauCgiSvrClient{cc}
}

func (c *xMetauCgiSvrClient) WxTankLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/WxTankLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) WxBilliardLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/WxBilliardLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) WxChessLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/WxChessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) ByteDanceBilliardLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/ByteDanceBilliardLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	out := new(QueryUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/QueryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserHeader(ctx context.Context, in *UpdateUserHeaderReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserNoviceTraining(ctx context.Context, in *UpdateUserTrainingReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserNoviceTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserPlayLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserPlayLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserCoin(ctx context.Context, in *UpdateUserCoinReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateGameNum(ctx context.Context, in *UpdateGameNumReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateGameNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) QueryUserRankList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/QueryUserRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) QueryRobotUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/QueryRobotUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) AssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*AssetListResp, error) {
	out := new(AssetListResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/AssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UserAssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*UserAssetResp, error) {
	out := new(UserAssetResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UserAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserAsset(ctx context.Context, in *UpdateUserAssetReq, opts ...grpc.CallOption) (*UserAssetResp, error) {
	out := new(UserAssetResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) SettingList(ctx context.Context, in *GameSettingReq, opts ...grpc.CallOption) (*GameSettingResp, error) {
	out := new(GameSettingResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/SettingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*UpdateSettingResp, error) {
	out := new(UpdateSettingResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error) {
	out := new(CreateTeamResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) GetTeamRankList(ctx context.Context, in *TeamRankListReq, opts ...grpc.CallOption) (*TeamRankListResp, error) {
	out := new(TeamRankListResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/GetTeamRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamResp, error) {
	out := new(JoinTeamResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/JoinTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) GetUserTeam(ctx context.Context, in *UserTeamReq, opts ...grpc.CallOption) (*UserTeamResp, error) {
	out := new(UserTeamResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/GetUserTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserTeam(ctx context.Context, in *UpdateUserTeamReq, opts ...grpc.CallOption) (*UpdateUserTeamResp, error) {
	out := new(UpdateUserTeamResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) GetTeamInfo(ctx context.Context, in *TeamInfoReq, opts ...grpc.CallOption) (*TeamInfoResp, error) {
	out := new(TeamInfoResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/GetTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) GetUserBarrierLevel(ctx context.Context, in *UserBarrierLevelReq, opts ...grpc.CallOption) (*UserBarrierLevelResp, error) {
	out := new(UserBarrierLevelResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/GetUserBarrierLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauCgiSvrClient) UpdateUserBarrierLevel(ctx context.Context, in *UpdateUserBarrierLevelReq, opts ...grpc.CallOption) (*UpdateUserBarrierLevelResp, error) {
	out := new(UpdateUserBarrierLevelResp)
	err := c.cc.Invoke(ctx, "/cgi.XMetauCgiSvr/UpdateUserBarrierLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XMetauCgiSvrServer is the server API for XMetauCgiSvr service.
// All implementations should embed UnimplementedXMetauCgiSvrServer
// for forward compatibility
type XMetauCgiSvrServer interface {
	// 各平台各游戏的登录接口
	// 微信坦克游戏登录
	WxTankLogin(context.Context, *LoginReq) (*LoginRsp, error)
	// 微信桌球游戏登录
	WxBilliardLogin(context.Context, *LoginReq) (*LoginRsp, error)
	// 登录换信息，一步到位
	WxChessLogin(context.Context, *LoginReq) (*LoginRsp, error)
	// 字节跳动桌球游戏登录
	ByteDanceBilliardLogin(context.Context, *LoginReq) (*LoginRsp, error)
	// 用户基础信息
	QueryUser(context.Context, *QueryUserReq) (*QueryUserResp, error)
	// 更新用户头部信息
	UpdateUserHeader(context.Context, *UpdateUserHeaderReq) (*UpdateUserResp, error)
	// 更新用户是否完成新手训练
	UpdateUserNoviceTraining(context.Context, *UpdateUserTrainingReq) (*UpdateUserResp, error)
	// 更新用户棋力等级
	UpdateUserPlayLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserResp, error)
	// 更新金币数量
	UpdateUserCoin(context.Context, *UpdateUserCoinReq) (*UpdateUserResp, error)
	// 更新输赢的次数
	UpdateGameNum(context.Context, *UpdateGameNumReq) (*UpdateUserResp, error)
	// 查询用户排名列表
	QueryUserRankList(context.Context, *UserListReq) (*UserListResp, error)
	// 拉取机器人列表
	QueryRobotUserList(context.Context, *UserListReq) (*UserListResp, error)
	// 资产相关
	AssetList(context.Context, *CommonUserReq) (*AssetListResp, error)
	UserAssetList(context.Context, *CommonUserReq) (*UserAssetResp, error)
	UpdateUserAsset(context.Context, *UpdateUserAssetReq) (*UserAssetResp, error)
	// 设置相关
	SettingList(context.Context, *GameSettingReq) (*GameSettingResp, error)
	UpdateSetting(context.Context, *UpdateSettingReq) (*UpdateSettingResp, error)
	// 队伍场景用户信息
	CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error)
	GetTeamRankList(context.Context, *TeamRankListReq) (*TeamRankListResp, error)
	JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamResp, error)
	GetUserTeam(context.Context, *UserTeamReq) (*UserTeamResp, error)
	UpdateUserTeam(context.Context, *UpdateUserTeamReq) (*UpdateUserTeamResp, error)
	GetTeamInfo(context.Context, *TeamInfoReq) (*TeamInfoResp, error)
	// 闯关信息
	GetUserBarrierLevel(context.Context, *UserBarrierLevelReq) (*UserBarrierLevelResp, error)
	UpdateUserBarrierLevel(context.Context, *UpdateUserBarrierLevelReq) (*UpdateUserBarrierLevelResp, error)
}

// UnimplementedXMetauCgiSvrServer should be embedded to have forward compatible implementations.
type UnimplementedXMetauCgiSvrServer struct {
}

func (UnimplementedXMetauCgiSvrServer) WxTankLogin(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxTankLogin not implemented")
}
func (UnimplementedXMetauCgiSvrServer) WxBilliardLogin(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxBilliardLogin not implemented")
}
func (UnimplementedXMetauCgiSvrServer) WxChessLogin(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxChessLogin not implemented")
}
func (UnimplementedXMetauCgiSvrServer) ByteDanceBilliardLogin(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByteDanceBilliardLogin not implemented")
}
func (UnimplementedXMetauCgiSvrServer) QueryUser(context.Context, *QueryUserReq) (*QueryUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserHeader(context.Context, *UpdateUserHeaderReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserHeader not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserNoviceTraining(context.Context, *UpdateUserTrainingReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNoviceTraining not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserPlayLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPlayLevel not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserCoin(context.Context, *UpdateUserCoinReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCoin not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateGameNum(context.Context, *UpdateGameNumReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameNum not implemented")
}
func (UnimplementedXMetauCgiSvrServer) QueryUserRankList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRankList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) QueryRobotUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRobotUserList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) AssetList(context.Context, *CommonUserReq) (*AssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UserAssetList(context.Context, *CommonUserReq) (*UserAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAssetList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserAsset(context.Context, *UpdateUserAssetReq) (*UserAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAsset not implemented")
}
func (UnimplementedXMetauCgiSvrServer) SettingList(context.Context, *GameSettingReq) (*GameSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateSetting(context.Context, *UpdateSettingReq) (*UpdateSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedXMetauCgiSvrServer) CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedXMetauCgiSvrServer) GetTeamRankList(context.Context, *TeamRankListReq) (*TeamRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamRankList not implemented")
}
func (UnimplementedXMetauCgiSvrServer) JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedXMetauCgiSvrServer) GetUserTeam(context.Context, *UserTeamReq) (*UserTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTeam not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserTeam(context.Context, *UpdateUserTeamReq) (*UpdateUserTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTeam not implemented")
}
func (UnimplementedXMetauCgiSvrServer) GetTeamInfo(context.Context, *TeamInfoReq) (*TeamInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamInfo not implemented")
}
func (UnimplementedXMetauCgiSvrServer) GetUserBarrierLevel(context.Context, *UserBarrierLevelReq) (*UserBarrierLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBarrierLevel not implemented")
}
func (UnimplementedXMetauCgiSvrServer) UpdateUserBarrierLevel(context.Context, *UpdateUserBarrierLevelReq) (*UpdateUserBarrierLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBarrierLevel not implemented")
}

// UnsafeXMetauCgiSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XMetauCgiSvrServer will
// result in compilation errors.
type UnsafeXMetauCgiSvrServer interface {
	mustEmbedUnimplementedXMetauCgiSvrServer()
}

func RegisterXMetauCgiSvrServer(s grpc.ServiceRegistrar, srv XMetauCgiSvrServer) {
	s.RegisterService(&XMetauCgiSvr_ServiceDesc, srv)
}

func _XMetauCgiSvr_WxTankLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).WxTankLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/WxTankLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).WxTankLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_WxBilliardLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).WxBilliardLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/WxBilliardLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).WxBilliardLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_WxChessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).WxChessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/WxChessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).WxChessLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_ByteDanceBilliardLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).ByteDanceBilliardLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/ByteDanceBilliardLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).ByteDanceBilliardLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).QueryUser(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserHeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserHeader(ctx, req.(*UpdateUserHeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserNoviceTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTrainingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserNoviceTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserNoviceTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserNoviceTraining(ctx, req.(*UpdateUserTrainingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserPlayLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserPlayLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserPlayLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserPlayLevel(ctx, req.(*UpdateUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserCoin(ctx, req.(*UpdateUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateGameNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateGameNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateGameNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateGameNum(ctx, req.(*UpdateGameNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_QueryUserRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).QueryUserRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/QueryUserRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).QueryUserRankList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_QueryRobotUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).QueryRobotUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/QueryRobotUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).QueryRobotUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/AssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).AssetList(ctx, req.(*CommonUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UserAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UserAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UserAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UserAssetList(ctx, req.(*CommonUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserAsset(ctx, req.(*UpdateUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_SettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).SettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/SettingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).SettingList(ctx, req.(*GameSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateSetting(ctx, req.(*UpdateSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).CreateTeam(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_GetTeamRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).GetTeamRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/GetTeamRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).GetTeamRankList(ctx, req.(*TeamRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/JoinTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).JoinTeam(ctx, req.(*JoinTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_GetUserTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).GetUserTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/GetUserTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).GetUserTeam(ctx, req.(*UserTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserTeam(ctx, req.(*UpdateUserTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_GetTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).GetTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/GetTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).GetTeamInfo(ctx, req.(*TeamInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_GetUserBarrierLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBarrierLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).GetUserBarrierLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/GetUserBarrierLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).GetUserBarrierLevel(ctx, req.(*UserBarrierLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauCgiSvr_UpdateUserBarrierLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBarrierLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauCgiSvrServer).UpdateUserBarrierLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cgi.XMetauCgiSvr/UpdateUserBarrierLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauCgiSvrServer).UpdateUserBarrierLevel(ctx, req.(*UpdateUserBarrierLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// XMetauCgiSvr_ServiceDesc is the grpc.ServiceDesc for XMetauCgiSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XMetauCgiSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cgi.XMetauCgiSvr",
	HandlerType: (*XMetauCgiSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WxTankLogin",
			Handler:    _XMetauCgiSvr_WxTankLogin_Handler,
		},
		{
			MethodName: "WxBilliardLogin",
			Handler:    _XMetauCgiSvr_WxBilliardLogin_Handler,
		},
		{
			MethodName: "WxChessLogin",
			Handler:    _XMetauCgiSvr_WxChessLogin_Handler,
		},
		{
			MethodName: "ByteDanceBilliardLogin",
			Handler:    _XMetauCgiSvr_ByteDanceBilliardLogin_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _XMetauCgiSvr_QueryUser_Handler,
		},
		{
			MethodName: "UpdateUserHeader",
			Handler:    _XMetauCgiSvr_UpdateUserHeader_Handler,
		},
		{
			MethodName: "UpdateUserNoviceTraining",
			Handler:    _XMetauCgiSvr_UpdateUserNoviceTraining_Handler,
		},
		{
			MethodName: "UpdateUserPlayLevel",
			Handler:    _XMetauCgiSvr_UpdateUserPlayLevel_Handler,
		},
		{
			MethodName: "UpdateUserCoin",
			Handler:    _XMetauCgiSvr_UpdateUserCoin_Handler,
		},
		{
			MethodName: "UpdateGameNum",
			Handler:    _XMetauCgiSvr_UpdateGameNum_Handler,
		},
		{
			MethodName: "QueryUserRankList",
			Handler:    _XMetauCgiSvr_QueryUserRankList_Handler,
		},
		{
			MethodName: "QueryRobotUserList",
			Handler:    _XMetauCgiSvr_QueryRobotUserList_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _XMetauCgiSvr_AssetList_Handler,
		},
		{
			MethodName: "UserAssetList",
			Handler:    _XMetauCgiSvr_UserAssetList_Handler,
		},
		{
			MethodName: "UpdateUserAsset",
			Handler:    _XMetauCgiSvr_UpdateUserAsset_Handler,
		},
		{
			MethodName: "SettingList",
			Handler:    _XMetauCgiSvr_SettingList_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _XMetauCgiSvr_UpdateSetting_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _XMetauCgiSvr_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeamRankList",
			Handler:    _XMetauCgiSvr_GetTeamRankList_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _XMetauCgiSvr_JoinTeam_Handler,
		},
		{
			MethodName: "GetUserTeam",
			Handler:    _XMetauCgiSvr_GetUserTeam_Handler,
		},
		{
			MethodName: "UpdateUserTeam",
			Handler:    _XMetauCgiSvr_UpdateUserTeam_Handler,
		},
		{
			MethodName: "GetTeamInfo",
			Handler:    _XMetauCgiSvr_GetTeamInfo_Handler,
		},
		{
			MethodName: "GetUserBarrierLevel",
			Handler:    _XMetauCgiSvr_GetUserBarrierLevel_Handler,
		},
		{
			MethodName: "UpdateUserBarrierLevel",
			Handler:    _XMetauCgiSvr_UpdateUserBarrierLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cgi.proto",
}
