// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: unidao.proto

package unidao

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XMetauDaoServiceClient is the client API for XMetauDaoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XMetauDaoServiceClient interface {
	// 登录，首次登录则插入新用户
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 查询用户信息
	QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	// 更新用户头部信息
	UpdateUserHeader(ctx context.Context, in *UpdateUserHeaderReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新用户是否完成新手训练
	UpdateUserNoviceTraining(ctx context.Context, in *UpdateUserTrainingReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新用户棋力等级
	UpdateUserPlayLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新金币数量
	UpdateUserCoin(ctx context.Context, in *UpdateUserCoinReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新输赢的次数
	UpdateGameNum(ctx context.Context, in *UpdateGameNumReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 查询用户排名列表
	QueryUserRankList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// 机器人列表
	QueryRobotUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// 资产接口
	AssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*AssetListResp, error)
	UserAssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*UserAssetResp, error)
	UpdateUserAsset(ctx context.Context, in *UpdateUserAssetReq, opts ...grpc.CallOption) (*UserAssetResp, error)
	// 设置接口
	SettingList(ctx context.Context, in *GameSettingReq, opts ...grpc.CallOption) (*GameSettingResp, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*UpdateSettingResp, error)
	// 队伍场景用户信息
	CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error)
	GetTeamRankList(ctx context.Context, in *TeamRankListReq, opts ...grpc.CallOption) (*TeamRankListResp, error)
	JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamResp, error)
	GetUserTeam(ctx context.Context, in *UserTeamReq, opts ...grpc.CallOption) (*UserTeamResp, error)
	GetTeamInfo(ctx context.Context, in *TeamInfoReq, opts ...grpc.CallOption) (*TeamInfoResp, error)
	UpdateUserTeam(ctx context.Context, in *UpdateUserTeamReq, opts ...grpc.CallOption) (*UpdateUserTeamResp, error)
	// 闯关信息
	GetUserBarrierLevel(ctx context.Context, in *UserBarrierLevelReq, opts ...grpc.CallOption) (*UserBarrierLevelResp, error)
	UpdateUserBarrierLevel(ctx context.Context, in *UpdateUserBarrierLevelReq, opts ...grpc.CallOption) (*UpdateUserBarrierLevelResp, error)
}

type xMetauDaoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXMetauDaoServiceClient(cc grpc.ClientConnInterface) XMetauDaoServiceClient {
	return &xMetauDaoServiceClient{cc}
}

func (c *xMetauDaoServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	out := new(QueryUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/QueryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserHeader(ctx context.Context, in *UpdateUserHeaderReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserNoviceTraining(ctx context.Context, in *UpdateUserTrainingReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserNoviceTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserPlayLevel(ctx context.Context, in *UpdateUserLevelReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserPlayLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserCoin(ctx context.Context, in *UpdateUserCoinReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateGameNum(ctx context.Context, in *UpdateGameNumReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateGameNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) QueryUserRankList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/QueryUserRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) QueryRobotUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/QueryRobotUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) AssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*AssetListResp, error) {
	out := new(AssetListResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/AssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UserAssetList(ctx context.Context, in *CommonUserReq, opts ...grpc.CallOption) (*UserAssetResp, error) {
	out := new(UserAssetResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UserAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserAsset(ctx context.Context, in *UpdateUserAssetReq, opts ...grpc.CallOption) (*UserAssetResp, error) {
	out := new(UserAssetResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) SettingList(ctx context.Context, in *GameSettingReq, opts ...grpc.CallOption) (*GameSettingResp, error) {
	out := new(GameSettingResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/SettingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateSetting(ctx context.Context, in *UpdateSettingReq, opts ...grpc.CallOption) (*UpdateSettingResp, error) {
	out := new(UpdateSettingResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error) {
	out := new(CreateTeamResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) GetTeamRankList(ctx context.Context, in *TeamRankListReq, opts ...grpc.CallOption) (*TeamRankListResp, error) {
	out := new(TeamRankListResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/GetTeamRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) JoinTeam(ctx context.Context, in *JoinTeamReq, opts ...grpc.CallOption) (*JoinTeamResp, error) {
	out := new(JoinTeamResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/JoinTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) GetUserTeam(ctx context.Context, in *UserTeamReq, opts ...grpc.CallOption) (*UserTeamResp, error) {
	out := new(UserTeamResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/GetUserTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) GetTeamInfo(ctx context.Context, in *TeamInfoReq, opts ...grpc.CallOption) (*TeamInfoResp, error) {
	out := new(TeamInfoResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/GetTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserTeam(ctx context.Context, in *UpdateUserTeamReq, opts ...grpc.CallOption) (*UpdateUserTeamResp, error) {
	out := new(UpdateUserTeamResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) GetUserBarrierLevel(ctx context.Context, in *UserBarrierLevelReq, opts ...grpc.CallOption) (*UserBarrierLevelResp, error) {
	out := new(UserBarrierLevelResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/GetUserBarrierLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xMetauDaoServiceClient) UpdateUserBarrierLevel(ctx context.Context, in *UpdateUserBarrierLevelReq, opts ...grpc.CallOption) (*UpdateUserBarrierLevelResp, error) {
	out := new(UpdateUserBarrierLevelResp)
	err := c.cc.Invoke(ctx, "/dao.XMetauDaoService/UpdateUserBarrierLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XMetauDaoServiceServer is the server API for XMetauDaoService service.
// All implementations must embed UnimplementedXMetauDaoServiceServer
// for forward compatibility
type XMetauDaoServiceServer interface {
	// 登录，首次登录则插入新用户
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 查询用户信息
	QueryUser(context.Context, *QueryUserReq) (*QueryUserResp, error)
	// 更新用户头部信息
	UpdateUserHeader(context.Context, *UpdateUserHeaderReq) (*UpdateUserResp, error)
	// 更新用户是否完成新手训练
	UpdateUserNoviceTraining(context.Context, *UpdateUserTrainingReq) (*UpdateUserResp, error)
	// 更新用户棋力等级
	UpdateUserPlayLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserResp, error)
	// 更新金币数量
	UpdateUserCoin(context.Context, *UpdateUserCoinReq) (*UpdateUserResp, error)
	// 更新输赢的次数
	UpdateGameNum(context.Context, *UpdateGameNumReq) (*UpdateUserResp, error)
	// 查询用户排名列表
	QueryUserRankList(context.Context, *UserListReq) (*UserListResp, error)
	// 机器人列表
	QueryRobotUserList(context.Context, *UserListReq) (*UserListResp, error)
	// 资产接口
	AssetList(context.Context, *CommonUserReq) (*AssetListResp, error)
	UserAssetList(context.Context, *CommonUserReq) (*UserAssetResp, error)
	UpdateUserAsset(context.Context, *UpdateUserAssetReq) (*UserAssetResp, error)
	// 设置接口
	SettingList(context.Context, *GameSettingReq) (*GameSettingResp, error)
	UpdateSetting(context.Context, *UpdateSettingReq) (*UpdateSettingResp, error)
	// 队伍场景用户信息
	CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error)
	GetTeamRankList(context.Context, *TeamRankListReq) (*TeamRankListResp, error)
	JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamResp, error)
	GetUserTeam(context.Context, *UserTeamReq) (*UserTeamResp, error)
	GetTeamInfo(context.Context, *TeamInfoReq) (*TeamInfoResp, error)
	UpdateUserTeam(context.Context, *UpdateUserTeamReq) (*UpdateUserTeamResp, error)
	// 闯关信息
	GetUserBarrierLevel(context.Context, *UserBarrierLevelReq) (*UserBarrierLevelResp, error)
	UpdateUserBarrierLevel(context.Context, *UpdateUserBarrierLevelReq) (*UpdateUserBarrierLevelResp, error)
	mustEmbedUnimplementedXMetauDaoServiceServer()
}

// UnimplementedXMetauDaoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXMetauDaoServiceServer struct {
}

func (UnimplementedXMetauDaoServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedXMetauDaoServiceServer) QueryUser(context.Context, *QueryUserReq) (*QueryUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserHeader(context.Context, *UpdateUserHeaderReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserHeader not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserNoviceTraining(context.Context, *UpdateUserTrainingReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNoviceTraining not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserPlayLevel(context.Context, *UpdateUserLevelReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPlayLevel not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserCoin(context.Context, *UpdateUserCoinReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCoin not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateGameNum(context.Context, *UpdateGameNumReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameNum not implemented")
}
func (UnimplementedXMetauDaoServiceServer) QueryUserRankList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRankList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) QueryRobotUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRobotUserList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) AssetList(context.Context, *CommonUserReq) (*AssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UserAssetList(context.Context, *CommonUserReq) (*UserAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAssetList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserAsset(context.Context, *UpdateUserAssetReq) (*UserAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAsset not implemented")
}
func (UnimplementedXMetauDaoServiceServer) SettingList(context.Context, *GameSettingReq) (*GameSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateSetting(context.Context, *UpdateSettingReq) (*UpdateSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedXMetauDaoServiceServer) CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedXMetauDaoServiceServer) GetTeamRankList(context.Context, *TeamRankListReq) (*TeamRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamRankList not implemented")
}
func (UnimplementedXMetauDaoServiceServer) JoinTeam(context.Context, *JoinTeamReq) (*JoinTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedXMetauDaoServiceServer) GetUserTeam(context.Context, *UserTeamReq) (*UserTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTeam not implemented")
}
func (UnimplementedXMetauDaoServiceServer) GetTeamInfo(context.Context, *TeamInfoReq) (*TeamInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamInfo not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserTeam(context.Context, *UpdateUserTeamReq) (*UpdateUserTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTeam not implemented")
}
func (UnimplementedXMetauDaoServiceServer) GetUserBarrierLevel(context.Context, *UserBarrierLevelReq) (*UserBarrierLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBarrierLevel not implemented")
}
func (UnimplementedXMetauDaoServiceServer) UpdateUserBarrierLevel(context.Context, *UpdateUserBarrierLevelReq) (*UpdateUserBarrierLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBarrierLevel not implemented")
}
func (UnimplementedXMetauDaoServiceServer) mustEmbedUnimplementedXMetauDaoServiceServer() {}

// UnsafeXMetauDaoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XMetauDaoServiceServer will
// result in compilation errors.
type UnsafeXMetauDaoServiceServer interface {
	mustEmbedUnimplementedXMetauDaoServiceServer()
}

func RegisterXMetauDaoServiceServer(s grpc.ServiceRegistrar, srv XMetauDaoServiceServer) {
	s.RegisterService(&XMetauDaoService_ServiceDesc, srv)
}

func _XMetauDaoService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).QueryUser(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserHeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserHeader(ctx, req.(*UpdateUserHeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserNoviceTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTrainingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserNoviceTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserNoviceTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserNoviceTraining(ctx, req.(*UpdateUserTrainingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserPlayLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserPlayLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserPlayLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserPlayLevel(ctx, req.(*UpdateUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserCoin(ctx, req.(*UpdateUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateGameNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateGameNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateGameNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateGameNum(ctx, req.(*UpdateGameNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_QueryUserRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).QueryUserRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/QueryUserRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).QueryUserRankList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_QueryRobotUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).QueryRobotUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/QueryRobotUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).QueryRobotUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/AssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).AssetList(ctx, req.(*CommonUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UserAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UserAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UserAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UserAssetList(ctx, req.(*CommonUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserAsset(ctx, req.(*UpdateUserAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_SettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).SettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/SettingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).SettingList(ctx, req.(*GameSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateSetting(ctx, req.(*UpdateSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).CreateTeam(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_GetTeamRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).GetTeamRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/GetTeamRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).GetTeamRankList(ctx, req.(*TeamRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/JoinTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).JoinTeam(ctx, req.(*JoinTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_GetUserTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).GetUserTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/GetUserTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).GetUserTeam(ctx, req.(*UserTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_GetTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).GetTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/GetTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).GetTeamInfo(ctx, req.(*TeamInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserTeam(ctx, req.(*UpdateUserTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_GetUserBarrierLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBarrierLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).GetUserBarrierLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/GetUserBarrierLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).GetUserBarrierLevel(ctx, req.(*UserBarrierLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XMetauDaoService_UpdateUserBarrierLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBarrierLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XMetauDaoServiceServer).UpdateUserBarrierLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.XMetauDaoService/UpdateUserBarrierLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XMetauDaoServiceServer).UpdateUserBarrierLevel(ctx, req.(*UpdateUserBarrierLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// XMetauDaoService_ServiceDesc is the grpc.ServiceDesc for XMetauDaoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XMetauDaoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dao.XMetauDaoService",
	HandlerType: (*XMetauDaoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _XMetauDaoService_Login_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _XMetauDaoService_QueryUser_Handler,
		},
		{
			MethodName: "UpdateUserHeader",
			Handler:    _XMetauDaoService_UpdateUserHeader_Handler,
		},
		{
			MethodName: "UpdateUserNoviceTraining",
			Handler:    _XMetauDaoService_UpdateUserNoviceTraining_Handler,
		},
		{
			MethodName: "UpdateUserPlayLevel",
			Handler:    _XMetauDaoService_UpdateUserPlayLevel_Handler,
		},
		{
			MethodName: "UpdateUserCoin",
			Handler:    _XMetauDaoService_UpdateUserCoin_Handler,
		},
		{
			MethodName: "UpdateGameNum",
			Handler:    _XMetauDaoService_UpdateGameNum_Handler,
		},
		{
			MethodName: "QueryUserRankList",
			Handler:    _XMetauDaoService_QueryUserRankList_Handler,
		},
		{
			MethodName: "QueryRobotUserList",
			Handler:    _XMetauDaoService_QueryRobotUserList_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _XMetauDaoService_AssetList_Handler,
		},
		{
			MethodName: "UserAssetList",
			Handler:    _XMetauDaoService_UserAssetList_Handler,
		},
		{
			MethodName: "UpdateUserAsset",
			Handler:    _XMetauDaoService_UpdateUserAsset_Handler,
		},
		{
			MethodName: "SettingList",
			Handler:    _XMetauDaoService_SettingList_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _XMetauDaoService_UpdateSetting_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _XMetauDaoService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeamRankList",
			Handler:    _XMetauDaoService_GetTeamRankList_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _XMetauDaoService_JoinTeam_Handler,
		},
		{
			MethodName: "GetUserTeam",
			Handler:    _XMetauDaoService_GetUserTeam_Handler,
		},
		{
			MethodName: "GetTeamInfo",
			Handler:    _XMetauDaoService_GetTeamInfo_Handler,
		},
		{
			MethodName: "UpdateUserTeam",
			Handler:    _XMetauDaoService_UpdateUserTeam_Handler,
		},
		{
			MethodName: "GetUserBarrierLevel",
			Handler:    _XMetauDaoService_GetUserBarrierLevel_Handler,
		},
		{
			MethodName: "UpdateUserBarrierLevel",
			Handler:    _XMetauDaoService_UpdateUserBarrierLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unidao.proto",
}
